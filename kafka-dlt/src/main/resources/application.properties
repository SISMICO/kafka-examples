spring.application.name=kafka-dlt

# Kafka bootstrap servers
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

# Topic and app parameters
app.topic.pizza-created=pizza-created
app.retry.attempts=${APP_RETRY_ATTEMPTS:3}
app.failure.probability=${APP_FAILURE_PROBABILITY:0.5}

# Native (Spring Kafka) consumer group
app.kafka.native.group=pizza-native-consumer

# Ensure delivery attempt header is added by the listener container
spring.kafka.listener.delivery-attempt-header=true

# Spring Kafka JSON serialization/deserialization
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.value.default.type=org.example.kafkadlt.kafkadlt.model.Pizza

# Spring Cloud Stream function binding for the second consumer
spring.cloud.function.definition=pizzaStreamConsumer
spring.cloud.stream.bindings.pizzaStreamConsumer-in-0.destination=${app.topic.pizza-created}
spring.cloud.stream.bindings.pizzaStreamConsumer-in-0.group=pizza-stream-consumer
spring.cloud.stream.bindings.pizzaStreamConsumer-in-0.content-type=application/json
# Use the same retry attempts as the native consumer
spring.cloud.stream.bindings.pizzaStreamConsumer-in-0.consumer.maxAttempts=${app.retry.attempts}
# Kafka binder DLQ settings for the Stream consumer (distinct DLT topic)
spring.cloud.stream.kafka.bindings.pizzaStreamConsumer-in-0.consumer.enableDlq=true
spring.cloud.stream.kafka.bindings.pizzaStreamConsumer-in-0.consumer.dlqName=pizza-created-dlt-stream
